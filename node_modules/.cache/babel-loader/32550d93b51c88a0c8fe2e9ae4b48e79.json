{"ast":null,"code":"var _jsxFileName = \"/home/generous/projects/t-store/src/components/context/auth/State.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport AuthReducer from \"./Reducer\";\nimport AuthContext from \"./Context\";\nimport { REGISTER, LOGIN, LOGOUT, UPDATE_PASSWORD } from \"../types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthState = props => {\n  _s();\n\n  const initialState = {\n    users: [{\n      username: 'admin',\n      password: 'password',\n      fullName: 'Admin'\n    }, {\n      username: 'user',\n      password: 'password',\n      fullName: 'User'\n    }, {\n      username: 'owner',\n      password: 'password',\n      fullName: 'Owner'\n    }],\n    user: {\n      username: 'admin',\n      password: 'password',\n      fullName: 'Administrator'\n    },\n    logedin: false\n  };\n  const [state, dispatch] = useReducer(AuthReducer, initialState); // set local storage to logged in user\n\n  /*if (window.localStorage.getItem('user')){\n    initialState.login = true \n  }*/\n  //actions\n  //Register user\n\n  const register = user => {\n    dispatch({\n      type: (REGISTER, LOGIN),\n      payload: user\n    });\n  }; //log user in\n\n\n  const login = () => {\n    dispatch({\n      type: LOGIN\n    });\n  }; //log user out\n\n\n  const logout = () => {\n    dispatch({\n      type: LOGOUT\n    });\n  }; //log user out\n\n\n  const updatePassword = credentials => {\n    dispatch({\n      type: UPDATE_PASSWORD\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: state.user,\n      users: state.users,\n      logedin: state.logedin,\n      login,\n      register,\n      logout,\n      updatePassword\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = AuthState;\nexport default AuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthState\");","map":{"version":3,"sources":["/home/generous/projects/t-store/src/components/context/auth/State.js"],"names":["useReducer","AuthReducer","AuthContext","REGISTER","LOGIN","LOGOUT","UPDATE_PASSWORD","AuthState","props","initialState","users","username","password","fullName","user","logedin","state","dispatch","register","type","payload","login","logout","updatePassword","credentials","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,WAAxB;AACA,OAAOC,WAAP,MAAwB,WAAxB;AAEA,SACEC,QADF,EAEEC,KAFF,EAGEC,MAHF,EAIEC,eAJF,QAKO,UALP;;;AAOA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAC,CACJ;AACEC,MAAAA,QAAQ,EAAE,OADZ;AAEEC,MAAAA,QAAQ,EAAE,UAFZ;AAGEC,MAAAA,QAAQ,EAAE;AAHZ,KADI,EAMJ;AACEF,MAAAA,QAAQ,EAAE,MADZ;AAEEC,MAAAA,QAAQ,EAAE,UAFZ;AAGEC,MAAAA,QAAQ,EAAE;AAHZ,KANI,EAWJ;AACEF,MAAAA,QAAQ,EAAE,OADZ;AAEEC,MAAAA,QAAQ,EAAE,UAFZ;AAGEC,MAAAA,QAAQ,EAAE;AAHZ,KAXI,CADa;AAkBnBC,IAAAA,IAAI,EACF;AACEH,MAAAA,QAAQ,EAAE,OADZ;AAEEC,MAAAA,QAAQ,EAAE,UAFZ;AAGEC,MAAAA,QAAQ,EAAE;AAHZ,KAnBiB;AAyBnBE,IAAAA,OAAO,EAAE;AAzBU,GAArB;AA4BA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,UAAU,CAACC,WAAD,EAAcQ,YAAd,CAApC,CA7B2B,CA+B3B;;AACA;AACF;AACA;AAIE;AACA;;AACA,QAAMS,QAAQ,GAAIJ,IAAD,IAAU;AACzBG,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,GAAGhB,QAAQ,EAAEC,KAAb,CADG;AAEPgB,MAAAA,OAAO,EAAEN;AAFF,KAAD,CAAR;AAKD,GAND,CAxC2B,CAgD3B;;;AACA,QAAMO,KAAK,GAAG,MAAM;AAClBJ,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEf;AADC,KAAD,CAAR;AAGD,GAJD,CAjD2B,CAyD3B;;;AACA,QAAMkB,MAAM,GAAG,MAAM;AACnBL,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEd;AADC,KAAD,CAAR;AAGD,GAJD,CA1D2B,CAiE3B;;;AACA,QAAMkB,cAAc,GAAIC,WAAD,IAAiB;AACtCP,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEb;AADC,KAAD,CAAR;AAGD,GAJD;;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLQ,MAAAA,IAAI,EAAEE,KAAK,CAACF,IADP;AAELJ,MAAAA,KAAK,EAAEM,KAAK,CAACN,KAFR;AAGLK,MAAAA,OAAO,EAAEC,KAAK,CAACD,OAHV;AAILM,MAAAA,KAJK;AAKLH,MAAAA,QALK;AAMLI,MAAAA,MANK;AAOLC,MAAAA;AAPK,KADT;AAAA,cAWGf,KAAK,CAACiB;AAXT;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAvFD;;GAAMlB,S;;KAAAA,S;AAyFN,eAAeA,SAAf","sourcesContent":["import { useReducer } from \"react\";\nimport AuthReducer from \"./Reducer\";\nimport AuthContext from \"./Context\";\n\nimport {\n  REGISTER,\n  LOGIN,\n  LOGOUT,\n  UPDATE_PASSWORD,\n} from \"../types\";\n\nconst AuthState = (props) => {\n  const initialState = {\n    users:[\n      {\n        username: 'admin',\n        password: 'password',\n        fullName: 'Admin'\n      },\n      {\n        username: 'user',\n        password: 'password',\n        fullName: 'User'\n      },\n      {\n        username: 'owner',\n        password: 'password',\n        fullName: 'Owner'\n      },\n    ],\n    user:\n      {\n        username: 'admin',\n        password: 'password',\n        fullName: 'Administrator'\n      },\n\n    logedin: false,\n  };\n\n  const [state, dispatch] = useReducer(AuthReducer, initialState);\n\n  // set local storage to logged in user\n  /*if (window.localStorage.getItem('user')){\n    initialState.login = true \n  }*/\n\n\n  \n  //actions\n  //Register user\n  const register = (user) => {\n    dispatch({\n      type: (REGISTER, LOGIN),\n      payload: user,\n    });\n    \n  };\n\n  //log user in\n  const login = () => {\n    dispatch({\n      type: LOGIN,\n    });\n  };\n\n  \n\n  //log user out\n  const logout = () => {\n    dispatch({\n      type: LOGOUT,\n    });\n  };\n  \n\n  //log user out\n  const updatePassword = (credentials) => {\n    dispatch({\n      type: UPDATE_PASSWORD,\n    });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: state.user,\n        users: state.users,\n        logedin: state.logedin,\n        login,\n        register,\n        logout,\n        updatePassword\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthState;\n"]},"metadata":{},"sourceType":"module"}