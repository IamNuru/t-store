{"ast":null,"code":"var _jsxFileName = \"/home/generous/projects/t-store/src/components/context/settings/SettingsState.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer, useEffect } from \"react\";\nimport SettingsReducer from \"./SettingsReducer\";\nimport SettingsContext from \"./SettingsContext\";\nimport { NAVBAR_TOGGLE, CLOSE_NAVBAR } from \"../types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SettingsState = props => {\n  _s();\n\n  const initialState = {\n    isNavbarOpen: false\n  };\n  const [state, dispatch] = useReducer(SettingsReducer, initialState);\n  useEffect(() => {\n    console.log('hellow');\n  }, [initialState]);\n\n  const toggleNavbar = () => {\n    dispatch({\n      type: NAVBAR_TOGGLE\n    });\n  };\n\n  const closeNavbar = state => {\n    dispatch({\n      type: CLOSE_NAVBAR,\n      payload: state\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      isNavbarOpen: state.isNavbarOpen,\n      toggleNavbar,\n      closeNavbar\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsState, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = SettingsState;\nexport default SettingsState;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsState\");","map":{"version":3,"sources":["/home/generous/projects/t-store/src/components/context/settings/SettingsState.js"],"names":["useReducer","useEffect","SettingsReducer","SettingsContext","NAVBAR_TOGGLE","CLOSE_NAVBAR","SettingsState","props","initialState","isNavbarOpen","state","dispatch","console","log","toggleNavbar","type","closeNavbar","payload","children"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,SACEC,aADF,EAEEC,YAFF,QAGO,UAHP;;;AAKA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC/B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,YAAY,EAAE;AADK,GAArB;AAIA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,UAAU,CAACE,eAAD,EAAkBM,YAAlB,CAApC;AAGAP,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAED,GAHQ,EAGN,CAACL,YAAD,CAHM,CAAT;;AAKA,QAAMM,YAAY,GAAG,MAAK;AACxBH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR;AAGD,GAJD;;AAKA,QAAMY,WAAW,GAAIN,KAAD,IAAU;AAC5BC,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEV,YADC;AAEPY,MAAAA,OAAO,EAAEP;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,YAAY,EAAEC,KAAK,CAACD,YADf;AAELK,MAAAA,YAFK;AAGLE,MAAAA;AAHK,KADT;AAAA,cAQGT,KAAK,CAACW;AART;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CArCD;;GAAMZ,a;;KAAAA,a;AAuCN,eAAeA,aAAf","sourcesContent":["import { useReducer, useEffect } from \"react\";\nimport SettingsReducer from \"./SettingsReducer\";\nimport SettingsContext from \"./SettingsContext\";\n\nimport {\n  NAVBAR_TOGGLE,\n  CLOSE_NAVBAR\n} from \"../types\";\n\nconst SettingsState = (props) => {\n  const initialState = {\n    isNavbarOpen: false,\n  };\n\n  const [state, dispatch] = useReducer(SettingsReducer, initialState);\n\n\n  useEffect(() => {\n    console.log('hellow')\n    \n  }, [initialState])\n\n  const toggleNavbar = () =>{\n    dispatch({\n      type: NAVBAR_TOGGLE,\n    })\n  }\n  const closeNavbar = (state) =>{\n    dispatch({\n      type: CLOSE_NAVBAR,\n      payload: state\n    })\n  }\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        isNavbarOpen: state.isNavbarOpen,\n        toggleNavbar,\n        closeNavbar,\n\n      }}\n    >\n      {props.children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport default SettingsState;\n"]},"metadata":{},"sourceType":"module"}