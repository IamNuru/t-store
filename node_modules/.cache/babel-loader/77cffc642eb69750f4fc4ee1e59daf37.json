{"ast":null,"code":"import { REGISTER, LOGIN, LOGOUT, UPDATE_PASSWORD, ADD_TO_ORDERS, ERRORS, CLEAR_ERRORS, GET_ORDERS } from \"../types\";\n\nconst AuthReducer = (state, action) => {\n  switch (action.type) {\n    case REGISTER:\n    case LOGIN:\n      localStorage.setItem('token', action.payload.token);\n      return { ...state,\n        user: action.payload.user,\n        logedin: action.payload.token,\n        errors: null\n      };\n\n    /* case LOGIN:\n      return {\n        ...state,\n        user: action.payload[0].user,\n        logedin: action.payload[0].token,\n        errors: null\n      }; */\n\n    case LOGOUT:\n      localStorage.removeItem('token');\n      return { ...state,\n        logedin: false,\n        user: null,\n        errors: null\n      };\n\n    case GET_ORDERS:\n      return { ...state,\n        orders: action.payload\n      };\n\n    case CLEAR_ERRORS:\n      return {\n        errors: null\n      };\n\n    case UPDATE_PASSWORD:\n      return { ...state,\n        user: { ...state.user,\n          password: action.payload.newPassword\n        },\n\n        /* user: {...state, user: {...state.user, password:action.payload.newPassword}}, */\n        users: [...state.users.map(u => u.username === state.user.username ? { ...u,\n          password: action.payload.newPassword\n        } : u)]\n      };\n\n    case ERRORS:\n      return { ...state,\n        errors: action.payload\n      };\n\n    case ADD_TO_ORDERS:\n      return { ...state,\n        orders: [...state.orders, action.payload]\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\n_c = AuthReducer;\nexport default AuthReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthReducer\");","map":{"version":3,"sources":["/home/generous/projects/t-store/src/components/context/auth/Reducer.js"],"names":["REGISTER","LOGIN","LOGOUT","UPDATE_PASSWORD","ADD_TO_ORDERS","ERRORS","CLEAR_ERRORS","GET_ORDERS","AuthReducer","state","action","type","localStorage","setItem","payload","token","user","logedin","errors","removeItem","orders","password","newPassword","users","map","u","username"],"mappings":"AAAA,SACEA,QADF,EAEEC,KAFF,EAGEC,MAHF,EAIEC,eAJF,EAKEC,aALF,EAMEC,MANF,EAOEC,YAPF,EAQEC,UARF,QASO,UATP;;AAWA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,QAAL;AACA,SAAKC,KAAL;AACEW,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,MAAM,CAACI,OAAP,CAAeC,KAA7C;AACA,aAAO,EACL,GAAGN,KADE;AAELO,QAAAA,IAAI,EAAEN,MAAM,CAACI,OAAP,CAAeE,IAFhB;AAGLC,QAAAA,OAAO,EAAEP,MAAM,CAACI,OAAP,CAAeC,KAHnB;AAILG,QAAAA,MAAM,EAAE;AAJH,OAAP;;AAOF;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI,SAAKhB,MAAL;AACEU,MAAAA,YAAY,CAACO,UAAb,CAAwB,OAAxB;AACA,aAAO,EACL,GAAGV,KADE;AAELQ,QAAAA,OAAO,EAAE,KAFJ;AAGLD,QAAAA,IAAI,EAAE,IAHD;AAILE,QAAAA,MAAM,EAAE;AAJH,OAAP;;AAOF,SAAKX,UAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELW,QAAAA,MAAM,EAAEV,MAAM,CAACI;AAFV,OAAP;;AAKF,SAAKR,YAAL;AACE,aAAO;AACLY,QAAAA,MAAM,EAAE;AADH,OAAP;;AAIF,SAAKf,eAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELO,QAAAA,IAAI,EAAE,EAAC,GAAGP,KAAK,CAACO,IAAV;AAAgBK,UAAAA,QAAQ,EAACX,MAAM,CAACI,OAAP,CAAeQ;AAAxC,SAFD;;AAGL;AACAC,QAAAA,KAAK,EAAE,CAAC,GAAGd,KAAK,CAACc,KAAN,CAAYC,GAAZ,CAAiBC,CAAD,IAC3BA,CAAC,CAACC,QAAF,KAAejB,KAAK,CAACO,IAAN,CAAWU,QAA1B,GAAqC,EAAC,GAAGD,CAAJ;AAAOJ,UAAAA,QAAQ,EAACX,MAAM,CAACI,OAAP,CAAeQ;AAA/B,SAArC,GAAmFG,CADxE,CAAJ;AAJF,OAAP;;AASF,SAAKpB,MAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELS,QAAAA,MAAM,EAAER,MAAM,CAACI;AAFV,OAAP;;AAKF,SAAKV,aAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELW,QAAAA,MAAM,EAAE,CAAC,GAAGX,KAAK,CAACW,MAAV,EAAkBV,MAAM,CAACI,OAAzB;AAFH,OAAP;;AAKF;AACE,aAAO,EACL,GAAGL;AADE,OAAP;AA9DJ;AAkED,CAnED;;KAAMD,W;AAqEN,eAAeA,WAAf","sourcesContent":["import {\n  REGISTER,\n  LOGIN,\n  LOGOUT,\n  UPDATE_PASSWORD,\n  ADD_TO_ORDERS,\n  ERRORS,\n  CLEAR_ERRORS,\n  GET_ORDERS,\n} from \"../types\";\n\nconst AuthReducer = (state, action) => {\n  switch (action.type) {\n    case REGISTER:\n    case LOGIN:\n      localStorage.setItem('token', action.payload.token)\n      return {\n        ...state,\n        user: action.payload.user,\n        logedin: action.payload.token,\n        errors: null\n      };\n\n    /* case LOGIN:\n      return {\n        ...state,\n        user: action.payload[0].user,\n        logedin: action.payload[0].token,\n        errors: null\n      }; */\n\n    case LOGOUT:\n      localStorage.removeItem('token')\n      return {\n        ...state,\n        logedin: false,\n        user: null,\n        errors: null\n      };\n\n    case GET_ORDERS:\n      return {\n        ...state,\n        orders: action.payload\n      };\n\n    case CLEAR_ERRORS:\n      return {\n        errors: null\n      };\n\n    case UPDATE_PASSWORD:\n      return {\n        ...state,\n        user: {...state.user, password:action.payload.newPassword},\n        /* user: {...state, user: {...state.user, password:action.payload.newPassword}}, */\n        users: [...state.users.map((u) => \n        u.username === state.user.username ? {...u, password:action.payload.newPassword} : u)]\n      };\n      \n\n    case ERRORS:\n      return {\n        ...state,\n        errors: action.payload\n      };\n\n    case ADD_TO_ORDERS:\n      return {\n        ...state,\n        orders: [...state.orders, action.payload]\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nexport default AuthReducer;\n"]},"metadata":{},"sourceType":"module"}