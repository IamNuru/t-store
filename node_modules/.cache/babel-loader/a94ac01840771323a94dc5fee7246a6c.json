{"ast":null,"code":"var _jsxFileName = \"/home/generous/projects/t-store/src/components/cart/paymentMethods/PaystackPayment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport AuthContext from \"../../context/auth/Context\";\nimport CartContext from \"../../context/cart/CartContext\";\nimport { usePaystackPayment } from \"react-paystack\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Pay = props => {\n  _s();\n\n  const {\n    addToOrders,\n    user\n  } = useContext(AuthContext);\n  const {\n    cart,\n    couponValue,\n    shippingCharge\n  } = useContext(CartContext); //get cart amount to payy\n\n  const [amount] = useState(cart.map(item => item.price * item.qty).reduce((prev, next) => parseInt(prev) + parseInt(next), 0) - couponValue - shippingCharge); //configuration to send to paysatack\n\n  const config = {\n    reference: new Date().getTime(),\n    email: user ? user.email : \"abdulainurudeentitiaka@gmail.com\",\n    amount: (cart.map(item => item.price * item.qty).reduce((prev, next) => parseInt(prev) + parseInt(next), 0) - couponValue - shippingCharge) * 100,\n    currency: \"GHS\",\n    publicKey: \"pk_test_388414fe90e87507b1a57b42840c0ee3c7723ddb\"\n  }; // you can call this function anything\n\n  const onSuccess = reference => {\n    const order = {\n      momoNumber: momoNumber,\n      amount: amount,\n      payment_method: \"momoPay\",\n      cart: cart,\n      transaction_id: reference.reference\n    };\n    addToOrders(order);\n    props.directToPage.push(`/cart/checkout/success/${reference.reference}`);\n    console.log(reference);\n  }; // you can call this function anything\n\n\n  const onClose = () => {\n    // implementation for  whatever you want to do when the Paystack dialog closed.\n    console.log(\"closed\");\n  };\n\n  const initializePayment = usePaystackPayment(config);\n\n  const confirmPayWithPaystack = () => {\n    if (amount < 5) {\n      alert(\"There is an error making the transaction\");\n    } else if (cart.length < 0) {\n      alert(\"There is an error making the transaction\");\n    } else {\n      initializePayment(onSuccess, onClose);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: confirmPayWithPaystack,\n      children: \"Confirm and Make Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Pay, \"MjVj7yndWNgnfBrKJz//aQC+NXM=\", false, function () {\n  return [usePaystackPayment];\n});\n\n_c = Pay;\nexport default Pay;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pay\");","map":{"version":3,"sources":["/home/generous/projects/t-store/src/components/cart/paymentMethods/PaystackPayment.js"],"names":["React","useState","useContext","AuthContext","CartContext","usePaystackPayment","Pay","props","addToOrders","user","cart","couponValue","shippingCharge","amount","map","item","price","qty","reduce","prev","next","parseInt","config","reference","Date","getTime","email","currency","publicKey","onSuccess","order","momoNumber","payment_method","transaction_id","directToPage","push","console","log","onClose","initializePayment","confirmPayWithPaystack","alert","length"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport AuthContext from \"../../context/auth/Context\";\nimport CartContext from \"../../context/cart/CartContext\";\nimport { usePaystackPayment } from \"react-paystack\";\n\nconst Pay = (props) => {\n  const { addToOrders, user } = useContext(AuthContext);\n  const { cart, couponValue, shippingCharge } = useContext(CartContext);\n\n  //get cart amount to payy\n  const [amount] = useState(\n    cart\n      .map((item) => item.price * item.qty)\n      .reduce((prev, next) => parseInt(prev) + parseInt(next), 0) -\n      couponValue -\n      shippingCharge\n  );\n\n  //configuration to send to paysatack\n  const config = {\n    reference: new Date().getTime(),\n    email: user ? user.email : \"abdulainurudeentitiaka@gmail.com\",\n    amount:\n      (cart\n        .map((item) => item.price * item.qty)\n        .reduce((prev, next) => parseInt(prev) + parseInt(next), 0) -\n        couponValue -\n        shippingCharge) *\n      100,\n    currency: \"GHS\",\n    publicKey: \"pk_test_388414fe90e87507b1a57b42840c0ee3c7723ddb\",\n  };\n\n  // you can call this function anything\n  const onSuccess = (reference) => {\n    const order = {\n      momoNumber: momoNumber,\n      amount: amount,\n      payment_method: \"momoPay\",\n      cart: cart,\n      transaction_id: reference.reference,\n    };\n    addToOrders(order);\n    props.directToPage.push(`/cart/checkout/success/${reference.reference}`);\n    console.log(reference);\n  };\n\n  // you can call this function anything\n  const onClose = () => {\n    // implementation for  whatever you want to do when the Paystack dialog closed.\n    console.log(\"closed\");\n  };\n\n  const initializePayment = usePaystackPayment(config);\n\n  const confirmPayWithPaystack = () => {\n    if (amount < 5) {\n      alert(\"There is an error making the transaction\");\n    } else if (cart.length < 0) {\n      alert(\"There is an error making the transaction\");\n    } else {\n      initializePayment(onSuccess, onClose);\n    }\n  };\n  return (\n    <div>\n      <button onClick={confirmPayWithPaystack}>Confirm and Make Payment</button>\n    </div>\n  );\n};\n\nexport default Pay;\n"]},"metadata":{},"sourceType":"module"}